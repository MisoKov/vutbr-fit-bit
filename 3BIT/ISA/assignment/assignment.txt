Vytvořte komunikující aplikaci podle konkrétní vybrané specifikace pomocí síťové knihovny BSD sockets (pokud není ve variantě zadání uvedeno jinak). Projekt bude vypracován v jazyce C/C++. Pokud individuální zadání nespecifikuje vlastní referenční systém, musí být projekt přeložitelný a spustitelný na serveru merlin.fit.vutbr.cz pod operačním systémem GNU/Linux. Program by však měl být přenositelný. Hodnocení projektů může probíhat na jiném počítači s nainstalovaným OS GNU/Linux, včetně jiných architektur než Intel/AMD, jiných distribucí, jiných verzí knihoven apod. Pokud vyžadujete minimální verzi knihovny (dostupnou na serveru merlin), jasně tuto skutečnost označte v dokumentaci a README.

Vypracovaný projekt uložený v archívu .tar a se jménem xlogin00.tar odevzdejte elektronicky přes IS. Soubor nekomprimujte.

    Termín odevzdání je 18.11.2020 (hard deadline). Odevzdání e-mailem po uplynutí termínu, dodatečné opravy či doplnění kódu není možné.
    Odevzdaný projekt musí obsahovat:
        soubor se zdrojovým kódem (dodržujte jména souborů uvedená v konkrétním zadání),
        funkční Makefile pro překlad zdrojového souboru,
        dokumentaci (soubor manual.pdf), která bude obsahovat uvedení do problematiky, návrhu aplikace, popis implementace, základní informace o programu, návod na použití. V dokumentaci se očekává následující: titulní strana, obsah, logické strukturování textu, přehled nastudovaných informací z literatury, popis zajímavějších pasáží implementace, použití vytvořených programů a literatura.
        soubor README obsahující krátký textový popis programu s případnými rozšířeními/omezeními, příklad spuštění a seznam odevzdaných souborů,
        další požadované soubory podle konkrétního typu zadání. 
    Pokud v projektu nestihnete implementovat všechny požadované vlastnosti, je nutné veškerá omezení jasně uvést v dokumentaci a v souboru README.
    Co není v zadání jednoznačně uvedeno, můžete implementovat podle svého vlastního výběru. Zvolené řešení popište v dokumentaci.
    Při řešení projektu respektujte zvyklosti zavedené v OS unixového typu (jako je například formát textového souboru).
    Vytvořené programy by měly být použitelné a smysluplné, řádně komentované a formátované a členěné do funkcí a modulů. Program by měl obsahovat nápovědu informující uživatele o činnosti programu a jeho parametrech. Případné chyby budou intuitivně popisovány uživateli.
    Aplikace nesmí v žádném případě skončit s chybou SEGMENTATION FAULT ani jiným násilným systémovým ukončením (např. dělení nulou).
    Pokud přejímáte krátké pasáže zdrojových kódů z různých tutoriálů či příkladů z Internetu (ne mezi sebou), tak je nutné vyznačit tyto sekce a jejich autory dle licenčních podmínek, kterými se distribuce daných zdrojových kódů řídí. V případě nedodržení bude na projekt nahlíženo jako na plagiát.
    Konzultace k projektu podává vyučující, který zadání vypsal.
    Sledujte fórum k projektu, kde se může objevit dovysvětlení či upřesnění týkající se zadání.
    Před odevzdáním zkontrolujte, zda jste dodrželi všechna jména souborů požadovaná ve společné části zadání i v zadání pro konkrétní projekt. Zkontrolujte, zda je projekt přeložitelný.

Hodnocení projektu:

    Maximální počet bodů za projekt je 20 bodů.
        Maximálně 15 bodů za plně funkční aplikaci.
        Maximálně 5 bodů za dokumentaci. Dokumentace se hodnotí pouze v případě funkčního kódu. Pokud kód není odevzdán nebo nefunguje podle zadání, dokumentace se nehodnotí.
    Příklad kriterií pro hodnocení projektů:
        nepřehledný, nekomentovaný zdrojový text: až -7 bodů
        nefunkční či chybějící Makefile: až -4 body
        nekvalitní či chybějící dokumentace: až -5 bodů
        nedodržení formátu vstupu/výstupu či konfigurace: -10 body
        odevzdaný soubor nelze přeložit, spustit a odzkoušet: 0 bodů
        odevzdáno po termínu: 0 bodů
        nedodržení zadání: 0 bodů
        nefunkční kód: 0 bodů
        opsáno: 0 bodů (pro všechny, kdo mají stejný kód), návrh na zahájení disciplinárního řízení. 

Popis varianty:
Vytvořte program isabot, který bude působit jako bot na komunikační službě Discord. Bot se připojí na Discord server na kanál "#isa-bot" a bude reagovat na všechny zprávy zaslané ostatními uživateli. Bot bude fungovat jako echo pro všechny zprávy, které zachytí. V případě, že bot na daném kanále zachytí jakoukoli zprávu jiného uživatele (tedy jinou než svou vlastní) a zároveň, která není jiného bota (uživatelské jméno neobsahuje podřetězec "bot"), odešle tuto zprávu zpátky na kanál a to ve formátu "echo: <username> - <message>" (kde <username> představuje uživatelské jméno uživatele, který odeslal původní zprávu).

Kdekoli v zadání, kde uvidíte <nejaky_label>, uvažujte vždy výstup bez znaků "<" a ">".

Při vytváření programu je povoleno použít pouze hlavičkové soubory pro práci se sokety a další obvyklé funkce používané v síťovém prostředí (jako je netinet/*, sys/*, arpa/*, openssl/* apod.), knihovnu pro práci s vlákny (pthread), signály, časem, stejně jako standardní knihovnu jazyka C (varianty ISO/ANSI i POSIX), C++ a STL. Jiné knihovny nejsou povoleny.

Spuštění programu
Použití: isabot [-h|--help] [-v|--verbose] -t <bot_access_token>

Pořadí parametrů je libovolné. Popis parametrů:

    Spuštění programu bez parametrů zobrazí nápovědu.
    -h|--help : Vypíše nápovědu na standardní výstup.
    -v|--verbose : Bude zobrazovat zprávy, na které bot reaguje na standardní výstup ve formátu "<channel> - <username>: <message>".
    -t <bot_access_token> : Zde je nutno zadat autentizační token pro přístup bota na Discord.

Ukončení programu proběhne zasláním signálu SIGINT (tedy například pomocí kombinace kláves Ctrl + c), do té doby bude bot vykonávat svou funkcionalitu.


Doplňující informace k zadání

    Před odevzdáním projektu si důkladně pročtěte společné zadání pro všechny projekty.
    Jakékoliv rozšíření nezapomeňte zdůraznit v souboru README a v dokumentaci. Není však možné získat více bodů, než je stanovené maximum.
    Program se musí vypořádat s chybnými vstupy.
    Veškeré chybové výpisy vypisujte srozumitelně na standardní chybový výstup.
    Pokud máte pocit, že v zadání není něco specifikováno, popište v dokumentaci vámi zvolené řešení a zdůvodněte, proč jste si jej vybrali.
    V dokumentaci uveďte, jaké chybové zprávy váš program generuje a za jakých okolností.
    Vytvořený kód by měl být modulární a otestovaný. Testy, které jste při řešení projektu napsali, se spustí voláním "make test".
    Při řešení projektu uplatněte znalosti získané v dřívějších kurzech týkající se jak zdrojového kódu (formátování, komentáře), pojmenování souborů, tak vstřícnosti programu k uživateli.

Referenční Discord server
Pro vývoj a testování projektu využijte standardní Discord server dostupný na (discord.com). Při hodnocení projektu bude taktéž použit server založený na discord.com.

Při procesu vytváření a připojení bota následujte návod (zde), a pak následně pro komunikaci oficiální dokumentaci pro vývojáře pro Discord (viz Doporučená literatura).

Nastavení, se kterými bude projekt opravovat, budou zahrnovat:
Rozsahy (scopes): bot
Práva bota (Bot permissions): View Channels, Embed Links, Read Message History

Referenční prostředí pro překlad a testování
Program by měl být přenositelný. Referenční prostředí pro překlad budou servery eva.fit.vutbr.cz a merlin.fit.vutbr.cz (program musí být přeložitelný a funkční na obou systémech). Vlastní testování může probíhat na jiném počítači s nainstalovaným OS GNU/Linux, či FreeBSD, včetně jiných architektur než Intel/AMD, jiných distribucí, jiných verzí knihoven apod. Pokud vyžadujete minimální verzi knihovny (dostupné na serveru merlin a eva), jasně tuto skutečnost označte v dokumentaci a README.


Doporučená literatura

    RFC7235
    RFC7231
    RFC8259
    Discord Developer Portal
